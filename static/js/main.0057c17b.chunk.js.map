{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","xIsNext","stepNumber","step","setState","slice","length","calculateWinner","concat","status","current","winner","moves","map","move","console","log","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"sMAMA,SAASA,EAAOC,GACZ,OACI,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACvCF,EAAMG,O,IAKXC,E,qLACWC,GAAI,IAAD,OACZ,OACI,kBAACN,EAAD,CACII,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAK1C,OACI,6BACI,yBAAKJ,UAAU,aACVK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEvB,yBAAKP,UAAU,aACVK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEvB,yBAAKP,UAAU,aACVK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,S,GAzBnBC,IAAMC,WAgCpBC,E,YACF,WAAYX,GAAQ,IAAD,8BACf,4CAAMA,KACDY,MAAQ,CACTC,QAAS,CAAC,CACNN,QAASO,MAAM,GAAGC,KAAK,QAE3BC,SAAS,EACTC,WAAY,GAPD,E,oEAWZC,GACHZ,KAAKa,SAAS,CACVF,WAAYC,EACZF,QAAUE,EAAO,IAAO,M,kCAIpBb,GACR,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQO,MAAM,EAAGd,KAAKM,MAAMK,WAAa,GAE9DV,EADUM,EAAQA,EAAQQ,OAAO,GACfd,QAAQa,QAE5BE,EAAgBf,IAAYA,EAAQF,KAGpCC,KAAKM,MAAMI,QACXT,EAAQF,GAAK,IAEbE,EAAQF,GAAK,IAEjBC,KAAKa,SAAS,CACVN,QAASA,EAAQU,OAAO,CAAC,CACrBhB,QAASA,KAEbS,SAAUV,KAAKM,MAAMI,QACrBC,WAAYJ,EAAQQ,Y,+BAIlB,IAkBFG,EAlBC,OACCX,EAAUP,KAAKM,MAAMC,QACrBY,EAAUZ,EAAQP,KAAKM,MAAMK,YAC7BS,EAASJ,EAAgBG,EAAQlB,SAEjCoB,EAAQd,EAAQe,IAAI,SAACV,EAAMW,GAC7BC,QAAQC,IAAIb,GACZY,QAAQC,IAAIF,GACZ,IAAMG,EAAOH,EACT,eAAiBA,EACjB,mBACJ,OACI,wBAAII,IAAKJ,GACL,4BAAQ3B,QAAS,kBAAM,EAAKgC,OAAOL,KAAQG,MAWvD,OAJIR,EADAE,EACS,WAAaA,EAEb,iBAAmBpB,KAAKM,MAAMI,QAAU,IAAM,KAGvD,yBAAKf,UAAU,QACX,yBAAKA,UAAU,cACX,kBAACG,EAAD,CACIG,QAASkB,EAAQlB,QACjBL,QAAS,SAACG,GAAD,OAAO,EAAK8B,YAAY9B,OAGzC,yBAAKJ,UAAU,aACX,6BAAMuB,GACN,4BAAKG,S,GA3ENlB,IAAMC,WAkFzB,SAASY,EAAgBf,GAWrB,IAVA,IAAM6B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEA/B,EAAI,EAAGA,EAAI+B,EAAMf,OAAQhB,IAAK,CAAC,IAAD,cACnB+B,EAAM/B,GADa,GAC9BgC,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIhC,EAAQ8B,IAAM9B,EAAQ8B,KAAO9B,EAAQ+B,IAAM/B,EAAQ8B,KAAO9B,EAAQgC,GACpE,OAAOhC,EAAQ8B,GAGnB,OAAO,KAKXG,IAASC,OACL,kBAAC9B,EAAD,MACA+B,SAASC,eAAe,U","file":"static/js/main.0057c17b.chunk.js","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\n\n\nfunction Square(props) {\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n          {props.value}\n        </button>\n    );\n}\n  \nclass Board extends React.Component {\n    renderSquare(i) {\n        return (\n            <Square \n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}/>\n        )\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n  \nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n            }],\n            xIsNext: true,\n            stepNumber: 0,\n        };\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n        });\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length-1];\n        const squares = current.squares.slice();\n\n        if (calculateWinner(squares) || squares[i]) {\n            return ;\n        }\n        if (this.state.xIsNext) {\n            squares[i] = 'X';\n        } else {\n            squares[i] = 'O';\n        }\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n            }]),\n            xIsNext: !this.state.xIsNext,\n            stepNumber: history.length,\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        const moves = history.map((step, move) => {\n            console.log(step);\n            console.log(move);\n            const desc = move ?\n                'Go to move #' + move :\n                'Go to game start';\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            );\n        });\n\n        let status;\n        if (winner) {\n            status = 'Winner: ' + winner;\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board \n                        squares={current.squares}\n                        onClick={(i) => this.handleClick(i)}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}